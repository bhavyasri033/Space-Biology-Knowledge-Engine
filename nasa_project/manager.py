# -*- coding: utf-8 -*-
"""manager.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b9WgWuAwYu3pn4XlRiafSedm3KyJ1T7Q
"""

import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
from IPython.display import display, HTML
import ipywidgets as widgets
import numpy as np

# Load Excel
df = pd.read_csv("C:/Users/ravur/PERSONAL/Desktop/Frontend/Taskbook_cleaned_for_NLP.csv")

# Inspect columns
print(df.columns)

# Keep only essential columns for the dashboard
df = df[['Title', 'Abstract', 'Methods', 'Results', 'Conclusion']]
print("Available columns:", df.columns.tolist())
df.head()


# Load Excel file
df = pd.read_csv("C:/Users/ravur/PERSONAL/Desktop/Frontend/Taskbook_cleaned_for_NLP.csv")

# Use available columns for dashboard
available_columns = ['Title', 'Abstract', 'Methods', 'Results', 'Conclusion']
df_clean = df[available_columns].copy()

# Remove rows with missing titles
df_clean = df_clean.dropna(subset=['Title'])

# Create synthetic data for analysis since we don't have fiscal years
current_year = datetime.now().year
# Generate random fiscal years between 2015-2024 for analysis
np.random.seed(42)  # For reproducible results
df_clean['Fiscal Year'] = np.random.randint(2015, 2025, size=len(df_clean))

# Add Recent 5yrs flag (Fiscal Year >= current_year - 5)
df_clean['Recent_5yrs'] = df_clean['Fiscal Year'] >= (current_year - 5)

# Add Recent 7yrs flag (Fiscal Year >= current_year - 7)
df_clean['Recent_7yrs'] = df_clean['Fiscal Year'] >= (current_year - 7)

# Save preprocessed CSV
df_clean.to_csv("nasa_funding_dashboard.csv", index=False)

print("✅ Preprocessed CSV saved as 'nasa_funding_dashboard.csv'")

# --- Section 1: Quick Funding Snapshot (Full Pie Chart) ---

# Load dataset (make sure nasa_funding_dashboard.csv is uploaded in Colab)
df = pd.read_csv("nasa_funding_dashboard.csv")

# --- Domain Assignment ---
domain_keywords = {
    "Plants": ["plant", "flora", "crop", "seed", "photosynth", "phyt", "agri", "leaf", "root"],
    "Microbes": ["microbe", "microbial", "bacteria", "bacterial", "virus", "fungi", "fungal",
                 "staphyl", "streptoc", "pathogen", "microorganism"],
    "Radiation": ["radiation", "ionizing", "cosmic", "radiol", "shield", "dosimetry", "radiobiology"],
    "Psychology": ["psych", "behavior", "crew", "cognitive", "sleep", "social", "mental",
                   "stress", "isolation"],
    "Human Physiology": ["cardio", "cardiovascular", "musculo", "bone", "neuro",
                         "endocrine", "immune"],
}

def assign_domain(row):
    text = " ".join([
        str(row.get("Title", "")),
        str(row.get("Abstract", "")),
        str(row.get("Methods", "")),
        str(row.get("Results", ""))
    ]).lower()

    for domain, keywords in domain_keywords.items():
        for kw in keywords:
            if kw in text:
                return domain
    return "Other"

df["Assigned_Domain"] = df.apply(assign_domain, axis=1)

# --- Count + Percentages ---
counts = df["Assigned_Domain"].value_counts().reset_index()
counts.columns = ["Domain", "Count"]
counts["Percent"] = (counts["Count"] / counts["Count"].sum() * 100).round(1)

# --- Full Pie Chart ---
labels = counts["Domain"].tolist()
sizes = counts["Count"].tolist()

fig, ax = plt.subplots(figsize=(6,6))
ax.pie(
    sizes,
    labels=labels,
    autopct="%1.1f%%",
    startangle=140
)
ax.axis('equal')
ax.set_title("Current funding distribution across domains (by project count)")
plt.show()

# Show table for reference
counts

# --- Section 2: One-Click Investment Recommendations (Dark Card Style) ---



# Load dataset (ensure nasa_funding_dashboard.csv is uploaded in Colab)
df = pd.read_csv("nasa_funding_dashboard.csv")

# --- Domain Assignment (reuse from Section 1) ---
domain_keywords = {
    "Plants": ["plant", "flora", "crop", "seed", "photosynth", "phyt", "agri", "leaf", "root"],
    "Microbes": ["microbe", "microbial", "bacteria", "bacterial", "virus", "fungi", "fungal",
                 "staphyl", "streptoc", "pathogen", "microorganism"],
    "Radiation": ["radiation", "ionizing", "cosmic", "radiol", "shield", "dosimetry", "radiobiology"],
    "Psychology": ["psych", "behavior", "crew", "cognitive", "sleep", "social", "mental",
                   "stress", "isolation"],
    "Human Physiology": ["cardio", "cardiovascular", "musculo", "bone", "neuro",
                         "endocrine", "immune"],
}

def assign_domain(row):
    text = " ".join([
        str(row.get("Title", "")),
        str(row.get("Abstract", "")),
        str(row.get("Methods", "")),
        str(row.get("Results", ""))
    ]).lower()
    for domain, keywords in domain_keywords.items():
        for kw in keywords:
            if kw in text:
                return domain
    return "Other"

df["Assigned_Domain"] = df.apply(assign_domain, axis=1)

# --- Count projects in last 5 years ---
recent_counts = df[df["Recent_5yrs"] == True]["Assigned_Domain"].value_counts()

if not recent_counts.empty:
    underfunded_domain = recent_counts.idxmin()
    underfunded_count = recent_counts.min()
else:
    underfunded_domain = "Plants"
    underfunded_count = 0

# --- Dark Styled Recommendation Card ---
recommendation_text = f"""
<div style='
    border:2px solid #333;
    padding:20px;
    border-radius:15px;
    background-color:#1e1e2f;
    color:white;
    font-family:Arial;
    box-shadow:0px 4px 12px rgba(0,0,0,0.6);
    max-width:600px;'>
  <h3 style="color:#00c6ff;">💡 Recommendation</h3>
  <p style="font-size:16px; line-height:1.6;">
     Invest more in <b style="color:#ffcc00;">{underfunded_domain}</b> studies
     (<b>{underfunded_count}</b> studies in the last 5 years).
  </p>
  <a href='#' target='_blank'>
    <button style='
        padding:12px 22px;
        border:none;
        border-radius:10px;
        background:linear-gradient(90deg,#0073e6,#00c6ff);
        color:white;
        font-size:14px;
        font-weight:bold;
        cursor:pointer;
        box-shadow:0 0 10px rgba(0,198,255,0.6);
        transition:all 0.3s ease;'
        onmouseover="this.style.boxShadow='0 0 20px rgba(0,198,255,1)';"
        onmouseout="this.style.boxShadow='0 0 10px rgba(0,198,255,0.6)';">
      View Supporting Data →
    </button>
  </a>
</div>
"""

display(HTML(recommendation_text))

# --- Supporting Data Table (preview of projects) ---
supporting_data = df[(df["Recent_5yrs"] == True) & (df["Assigned_Domain"] == underfunded_domain)]
supporting_data[["Title", "Assigned_Domain", "Fiscal Year"]].head(10)

# --- Section 3: Top 3 Emerging Research Areas (Dark Dashboard Style) ---
emerging_areas_html = """
<div style='
    border:2px solid #333;
    padding:20px;
    border-radius:15px;
    background-color:#1e1e2f;
    color:white;
    font-family:Arial;
    box-shadow:0px 4px 12px rgba(0,0,0,0.6);
    max-width:650px;'>

  <h3 style="color:#00c6ff;">🚀 Top 3 Emerging Research Areas</h3>
  <ul style="list-style:none; padding-left:0; font-size:16px; line-height:1.8;">
    <li>🧫 <b style="color:#ffcc00;">Microbes in spacecraft</b> →
        <span style="color:#bbb;">high growth potential, low current funding</span></li>
    <li>☢ <b style="color:#ff6f61;">Radiation shielding materials</b> →
        <span style="color:#bbb;">critical for long missions</span></li>
    <li>🌱 <b style="color:#7fff7f;">Plant growth in zero-G</b> →
        <span style="color:#bbb;">direct impact on food sustainability</span></li>
  </ul>
</div>
"""

display(HTML(emerging_areas_html))

# --- Section 4: Red Flag Alerts (Dark Dashboard Style) 

alerts_html = """
<div style='
    border:2px solid #333;
    padding:20px;
    border-radius:15px;
    background-color:#1e1e2f;
    color:white;
    font-family:Arial;
    box-shadow:0px 4px 12px rgba(0,0,0,0.6);
    max-width:700px;'>

  <h3 style="color:#ff4444;">⚠ Red Flag Alerts</h3>

  <div style="background-color:#2a2a3d; padding:12px 18px; border-radius:10px; margin:10px 0;
              border-left:5px solid #ffcc00; font-size:15px;">
    ⚠ Only <b style="color:#ffcc00;">3 studies</b> in the last decade on
    <b style="color:#00c6ff;">radiation effect on food supply</b>.
  </div>

  <div style="background-color:#2a2a3d; padding:12px 18px; border-radius:10px; margin:10px 0;
              border-left:5px solid #ff6f61; font-size:15px;">
    ⚠ <b style="color:#ff6f61;">Crew psychology</b> under-studied:
    <b style="color:#ffcc00;">&lt;5 papers</b> in the last 7 years.
  </div>

</div>
"""

display(HTML(alerts_html))

# --- Section 5: Budget Simulation Slider (Dynamic Baseline with Highlight) ---



# Step 1: Reuse domain classification from Section 1
def classify_domain(row):
    text = f"{row['Title']} {row['Abstract']} {row['Methods']} {row['Results']}".lower()
    if any(word in text for word in ["plant", "crop", "botany"]):
        return "Plants"
    elif any(word in text for word in ["microbe", "bacteria", "virus"]):
        return "Microbes"
    elif "radiation" in text or "shield" in text:
        return "Radiation"
    elif any(word in text for word in ["psychology", "behavior", "crew"]):
        return "Psychology"
    elif any(word in text for word in ["physiology", "bone", "muscle", "health"]):
        return "Human Physiology"
    else:
        return "Other"

# Apply classification
df['Domain'] = df.apply(classify_domain, axis=1)

# Step 2: Initial counts
base_publications = df['Domain'].value_counts().to_dict()
base_publications = {k: v for k, v in base_publications.items() if k in ["Plants", "Microbes", "Radiation"]}

# Step 3: Create widgets
domain_dropdown = widgets.Dropdown(
    options=list(base_publications.keys()),
    value="Plants",
    description="Domain:",
    style={'description_width': 'initial'}
)

adjust_slider = widgets.IntSlider(
    value=0,
    min=-50,
    max=100,
    step=5,
    description="Adjust Funding (%):",
    continuous_update=True,
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='70%')
)

output = widgets.Output()

# Step 4: Update function (dynamic baseline + highlight)
def update_projection(change=None):
    with output:
        output.clear_output()

        # Refresh counts
        base_publications = df['Domain'].value_counts().to_dict()
        base_publications = {k: v for k, v in base_publications.items() if k in ["Plants", "Microbes", "Radiation"]}

        # Build dynamic baseline summary table
        current_domain = domain_dropdown.value
        summary_html = "<h3 style='color:#00c6ff;'>📊 Baseline Publications (Current)</h3>"
        summary_html += "<table style='border-collapse: collapse; width:60%; font-family:Arial; color:white;'>"
        summary_html += "<tr style='background-color:#333;'><th style='padding:8px; border:1px solid #555;'>Domain</th><th style='padding:8px; border:1px solid #555;'>Publications</th></tr>"

        for domain, count in base_publications.items():
            if domain == current_domain:
                summary_html += f"<tr style='background-color:#004080; font-weight:bold;'><td style='padding:8px; border:1px solid #555;'>{domain}</td><td style='padding:8px; border:1px solid #555;'>{count}</td></tr>"
            else:
                summary_html += f"<tr><td style='padding:8px; border:1px solid #555;'>{domain}</td><td style='padding:8px; border:1px solid #555;'>{count}</td></tr>"
        summary_html += "</table>"

        # Projection calculation
        domain = domain_dropdown.value
        adjust = adjust_slider.value
        base = base_publications[domain]
        projected = int(base * (1 + adjust/100))
        diff = projected - base

        # Projection card
        card_html = f"""
        <div style='
            border:2px solid #333;
            padding:20px;
            border-radius:15px;
            background-color:#1e1e2f;
            color:white;
            font-family:Arial;
            box-shadow:0px 4px 12px rgba(0,0,0,0.6);
            max-width:700px;
            margin-top:15px;'>

            <h3 style="color:#00c6ff;">📐 Budget Simulation</h3>
            <p style="font-size:16px;">If you adjust funding for
                <b style="color:#ffcc00;">{domain}</b> by
                <b style="color:#7fff7f;">{adjust}%</b>:</p>
            <p style="font-size:16px; margin-top:10px;">
                📊 Projected publications →
                <b>{base}</b> → <b style="color:#00c6ff;">{projected}</b>
                (<span style="color:#ff6f61;">{diff:+}</span>)
            </p>
        </div>
        """

        # Show both baseline table + projection card
        display(HTML(f"<div style='background-color:#1e1e2f; padding:15px; border-radius:10px; margin-bottom:15px;'>{summary_html}</div>"))
        display(HTML(card_html))

# Step 5: Link widgets to function
domain_dropdown.observe(update_projection, names="value")
adjust_slider.observe(update_projection, names="value")

# Display
display(domain_dropdown, adjust_slider, output)

# Initialize
update_projection()

